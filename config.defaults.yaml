auth:
  # Время жизни сессии после авторизации (1 год, например)
  jwtLifetime: '1y'
  # Уникальный ключ для генерации токенов авторизации
  jwtSignKey: '123'
  # Хэш пароля (bcrypt, можно создать через bcrypt-password.js)
  passwordHash: $2b$10$Bh6w2ua8ww1hN9Up4jhZ4.aioC536nc8OGYu8VIrqioBzyJ2WX0NG

backends:
  ipeye:
    # Тип видеопотока, получаемого от ipeye. Возможные значения: rtsp, rtmp и hls.
    streamType: rtsp

# Список камер.
#   name: произвольная строка
#   id: идентификатор камеры на бэкенде
#   backend: сервис (бэкенд), который использовать для данной камеры
cameras: []

# Файл, в котором хранятся состояния камер
cameraStateFile: cameras.json

defaultBackend: ipeye

http:
  # Порт для HTTP и WebSocket-сервера.
  port: 8000

reloader:
  # Куда сохранять изображения с камер.
  imagesPath: ./snapshots

  # Размер изображений по горизонтали в пикселях.
  imageSize: 320

  # Тайм-аут в миллисекундах. В случае, если не удаётся получить изображение дольше, чем
  # указано, то попытка обновления считается проваленной.
  timeout: 30000

scheduler:
  # Сколько попыток обновления камеры совершить перед тем, как признать её нерабочей.
  consequentRetries: 2

  # Задержка между обновлениями
  delayBetweenReloads: 0

  # Сколько видео обновлять одновременно.
  # Слишком большие значения (4-8 и более) могут приводить к битым изображениям из-за
  # ограничений канала.
  parallelReloads: 1

watcherLog:
  # Куда писать логи просмотров камер
  filename: watchers.log
